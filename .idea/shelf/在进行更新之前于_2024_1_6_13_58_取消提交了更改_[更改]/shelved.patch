Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import argparse\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    parser = argparse.ArgumentParser(description=\"Entrance for the main project.\")\r\n\r\n    # Subparsers for different commands\r\n    subparsers = parser.add_subparsers(title=\"Available commands\", dest=\"command\")\r\n\r\n    # Command: run\r\n    run_parser = subparsers.add_parser(\"run\", help=\"Run the program with a specified front-end framework.\")\r\n    run_parser.add_argument(\"-f\", \"--framework\", choices=[\"tkinter\", \"pyQt\"], default=\"tkinter\",\r\n                            help=\"Specify the front-end framework (tkinter or pyQt).\")\r\n\r\n    # Command: stimulator\r\n    stimulator_parser = subparsers.add_parser(\"stimulator\", help=\"Generate simulated data.\")\r\n    stimulator_parser.add_argument(\"-d\", \"--data_type\",\r\n                                   choices=[\"a\", \"all\", \"s\", \"step\", \"d\", \"distance\", \"f\", \"floor\", \"ah\",\r\n                                            \"active_hours\", \"ae\", \"active_energy\", \"em\", \"exercise_minutes\"],\r\n                                   help=\"Specify the type of data to generate.\")\r\n    stimulator_parser.add_argument(\"uid\", nargs=\"?\", default=\"0\", help=\"Specify the user's UID (default is '0').\")\r\n\r\n    args = parser.parse_args()\r\n\r\n    if args.command == \"run\":\r\n        print(f\"Running with {args.framework} framework.\")\r\n\r\n        if args.framework == \"tkinter\":\r\n            from health_tracker.health_app_tkinter import *\r\n            run_app()\r\n        elif args.framework == \"pyQt\":\r\n            from health_tracker.health_app_pyqt import *\r\n            run_app()\r\n        else:\r\n            raise ValueError(f\"Unknown framework: {args.framework}\")\r\n\r\n    elif args.command == \"stimulator\":\r\n        print(f\"Generating data {args.data_type} for user {args.uid}.\")\r\n\r\n        from health_tracker.tracker import *\r\n        if args.data_type == \"a\" or args.data_type == \"all\":  # 生成所有数据\r\n            DataStimulator.stimulate_all_data(args.uid)\r\n        elif args.data_type == \"s\" or args.data_type == \"step\":  # 生成步数数据\r\n            DataStimulator.stimulate_step_count(args.uid)\r\n        elif args.data_type == \"d\" or args.data_type == \"distance\":  # 生成距离数据\r\n            DataStimulator.stimulate_distance(args.uid)\r\n        elif args.data_type == \"f\" or args.data_type == \"floor\":  # 生成爬楼数据\r\n            DataStimulator.stimulate_flights_climbed(args.uid)\r\n        elif args.data_type == \"ah\" or args.data_type == \"active_hours\":  # 生成活动时间数据\r\n            DataStimulator.stimulate_active_hours(args.uid)\r\n        elif args.data_type == \"ae\" or args.data_type == \"active_energy\":  # 生成活动热量数据\r\n            DataStimulator.stimulate_active_energy_burned(args.uid)\r\n        elif args.data_type == \"em\" or args.data_type == \"exercise_minutes\":  # 生成运动时间数据\r\n            DataStimulator.stimulate_exercise_minutes(args.uid)\r\n        else:\r\n            raise ValueError(f\"Unknown data type: {args.data_type}\")\r\n\r\n    else:\r\n        parser.print_help()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision c3748598b753336fb4ad7620d1301ee41ae50a15)
+++ b/main.py	(date 1704301717375)
@@ -1,6 +1,5 @@
 import argparse
 
-
 if __name__ == "__main__":
     parser = argparse.ArgumentParser(description="Entrance for the main project.")
 
@@ -57,3 +56,4 @@
 
     else:
         parser.print_help()
+
Index: health_tracker/tracker/data.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"这个模块包含了所有的健康数据的类\"\"\"\r\n\r\nfrom abc import ABC, abstractmethod\r\nfrom collections import namedtuple, defaultdict\r\nfrom datetime import date as dt_date\r\nfrom .util import UserLocalFileStorage as LocalFileStorage\r\nfrom enum import Enum\r\n\r\n__all__ = [\"ActivityDataStatistics\", \"StepCount\", \"Distance\", \"FlightsClimbed\", \"ActiveEnergyBurned\", \"Profile\",\r\n           \"Distance\", \"FlightsClimbed\", \"ActiveEnergyBurned\"]\r\n\r\n\r\nclass ACTIVITY_DATA_TYPES(Enum):\r\n    \"\"\"活动数据类型枚举类\"\"\"\r\n    STEP_COUNT = 'step_count'\r\n    DISTANCE = 'distance'\r\n    FLIGHTS_CLIMBED = 'flights_climbed'\r\n    ACTIVE_ENERGY_BURNED = 'active_energy_burned'\r\n    EXERCISE_MINUTES = 'exercise_minutes'\r\n    ACTIVE_HOURS = 'active_hours'\r\n\r\n\r\nclass BaseData(ABC):\r\n    \"\"\"数据基类\"\"\"\r\n\r\n    # @abstractmethod\r\n    # def calculate_statistics(self):\r\n    #     pass\r\n    #\r\n    # @abstractmethod\r\n    # def display_statistics(self):\r\n    #     pass\r\n\r\n    @abstractmethod\r\n    def load_data(self):\r\n        pass\r\n\r\n    @abstractmethod\r\n    def save_data(self):\r\n        pass\r\n\r\n    # @abstractmethod\r\n    # def get_data(self):\r\n    #     \"\"\"提供数据请求接口\"\"\"\r\n    #     pass\r\n\r\n\r\nclass BaseActivityData(BaseData):\r\n    \"\"\"(弃用)活动数据基类\"\"\"\r\n\r\n    @abstractmethod\r\n    def get_data_by_date(self, date: dt_date):\r\n        \"\"\"\r\n        获取指定日期的所有数据\r\n        :param date:\r\n        :return:\r\n        \"\"\"\r\n        pass\r\n\r\n    @abstractmethod\r\n    def get_daily_total(self, date: dt_date):\r\n        \"\"\"\r\n        获取指定日期的数据总和\r\n        :param date:\r\n        :return:\r\n        \"\"\"\r\n        pass\r\n\r\n    @abstractmethod\r\n    def get_all_daily_total(self):\r\n        pass\r\n\r\n    @abstractmethod\r\n    def get_all_dates(self):\r\n        pass\r\n\r\n    @abstractmethod\r\n    def get_latest_daily_total(self):\r\n        pass\r\n\r\n\r\nclass ActivityDataStatistics:\r\n    \"\"\"活动数据统计类\"\"\"\r\n\r\n    def __init__(self, user_id):\r\n        self.steps = StepCount(user_id)\r\n        self.distance = Distance(user_id)\r\n        self.flights_climbed = FlightsClimbed(user_id)\r\n        self.active_energy_burned = ActiveEnergyBurned(user_id)\r\n        self.exercise_minutes = ExerciseMinutes(user_id)\r\n        self.active_hours = ActiveHours(user_id)\r\n\r\n        # self.data = defaultdict(list, {\r\n        #     'steps': [],\r\n        #     'distance': [],\r\n        #     'flights_climbed': [],\r\n        #     'active_energy_burned': []\r\n        # })\r\n\r\n    def get_all_daily_total(self):\r\n        return {\r\n            'steps': self.steps.get_all_daily_total(),\r\n            'distance': self.distance.get_all_daily_total(),\r\n            'flights_climbed': self.flights_climbed.get_all_daily_total(),\r\n            'active_energy_burned': self.active_energy_burned.get_all_daily_total(),\r\n            'exercise_minutes': self.exercise_minutes.get_all_daily_total(),\r\n            'active_hours': self.active_hours.get_all_daily_total()\r\n        }\r\n\r\n    def get_latest_daily_total(self) -> dict:\r\n        return {\r\n            'steps': self.steps.get_latest_daily_total(),\r\n            'distance': self.distance.get_latest_daily_total(),\r\n            'flights_climbed': self.flights_climbed.get_latest_daily_total(),\r\n            'active_energy_burned': self.active_energy_burned.get_latest_daily_total(),\r\n            'exercise_minutes': self.exercise_minutes.get_latest_daily_total(),\r\n            'active_hours': self.active_hours.get_latest_daily_total()\r\n        }\r\n\r\n\r\nclass WeightBaseData(BaseData):\r\n    \"\"\"体重身体测量数据类\"\"\"\r\n\r\n    def __init__(self):\r\n        self.data = []\r\n\r\n    def add_data(self, data_value):\r\n        self.data.append(data_value)\r\n\r\n\r\nclass Profile(BaseData):\r\n    \"\"\"个人资料类\"\"\"\r\n\r\n    def __init__(self, user_id):\r\n        self._datatype = 'profile'\r\n        self.user_id = user_id\r\n        self._profile = namedtuple(self._datatype, ['gender', 'birth', 'height', 'weight'])\r\n        self.data = None\r\n        self.load_data()\r\n\r\n    def load_data(self):\r\n        if LocalFileStorage.check_file(self.user_id, self._datatype):\r\n            self.data = self._profile(*LocalFileStorage.read_data(self.user_id, self._datatype))\r\n        else:\r\n            self.data = self._profile('未知', '未知', '未知', '未知')\r\n            self.save_data()\r\n\r\n    def save_data(self):\r\n        LocalFileStorage.write_data(self.user_id, self._datatype, self.data)\r\n\r\n    def update_data(self, data_value: list):\r\n        self.data = self._profile(*data_value)\r\n        self.save_data()\r\n\r\n    def get_data(self) -> dict:\r\n        \"\"\"返回用户的个人资料\"\"\"\r\n        return self.data._asdict()\r\n\r\n    def __repr__(self):\r\n        return f'Profile({self.data})'\r\n\r\n\r\nclass ManualUpdateInterface(ABC):\r\n    \"\"\"手动更新接口\"\"\"\r\n\r\n    @abstractmethod\r\n    def manual_update(self):\r\n        pass\r\n\r\n\r\nclass AutoUpdateInterface(ABC):\r\n    \"\"\"自动更新接口\"\"\"\r\n\r\n    @abstractmethod\r\n    def auto_update(self):\r\n        pass\r\n\r\n\r\nclass UpdateFromDevice(AutoUpdateInterface):\r\n    \"\"\"从设备更新接口\"\"\"\r\n\r\n    @staticmethod\r\n    def isAvailable():\r\n        \"\"\"检查设备是否连接\"\"\"\r\n        pass\r\n\r\n    @abstractmethod\r\n    def auto_update(self):\r\n        pass\r\n\r\n\r\nclass UpdateFromPhone(UpdateFromDevice):\r\n    \"\"\"从手机更新接口\"\"\"\r\n\r\n    @staticmethod\r\n    def isAvailable():\r\n        return False\r\n\r\n    def auto_update(self):\r\n        pass\r\n\r\n\r\nclass UpdateFromWatch(UpdateFromDevice):\r\n    \"\"\"从手表更新接口\"\"\"\r\n\r\n    @staticmethod\r\n    def isAvailable():\r\n        return False\r\n\r\n    def auto_update(self):\r\n        pass\r\n\r\n\r\nclass UpdateFromFile:\r\n    \"\"\"从文件更新接口\"\"\"\r\n\r\n    # def __init__(self, user_id, data_type, data_value, date: dt_date):\r\n    #     self._user_id = user_id\r\n    #     self._data_type = data_type\r\n    #     self._data_value = data_value\r\n    #     self._date = date\r\n\r\n    @staticmethod\r\n    def isAvailable():\r\n        return True\r\n\r\n    @staticmethod\r\n    def auto_update(user_id, data_type):\r\n        if LocalFileStorage.check_file(user_id, data_type):\r\n            data = LocalFileStorage.read_data(user_id, data_type)\r\n        else:\r\n            raise FileNotFoundError(f'用户 {user_id} 的 {data_type} 数据文件不存在')\r\n            # data = None\r\n        return data\r\n\r\n\r\n# class AutoUpdateFromMultipleWays(UpdateFromPhone, UpdateFromWatch, UpdateFromFile):\r\n#     \"\"\"支持多种方式自动更新的数据，统一管理获取数据的方法\"\"\"\r\n#\r\n#     def __init__(self, available_ways: list):\r\n#         self._available_ways = available_ways\r\n#\r\n#     def auto_update(self):\r\n#         for way in self._available_ways:\r\n#             if way.isAvailable():\r\n#                 # way.auto_update()\r\n#                 return way.auto_update\r\n\r\n\r\nclass AutoUpdateFromMultipleWays:\r\n    \"\"\"支持多种方式自动更新的数据，统一管理获取数据的方法\"\"\"\r\n\r\n    @staticmethod\r\n    def auto_update(available_ways: list):\r\n        \"\"\"\r\n        从多种方式中选择一种可用的方式来自动更新数据\r\n        :param available_ways:\r\n        :return:\r\n        \"\"\"\r\n        for way in available_ways:\r\n            if way.isAvailable():\r\n                # way.auto_update()\r\n                return way.auto_update\r\n\r\n\r\nclass ActivityData(BaseData, AutoUpdateFromMultipleWays):\r\n    \"\"\"\r\n    活动数据类, 数据格式为：(date, time, value)\r\n    \"\"\"\r\n\r\n    def __init__(self, user_id, data_type):\r\n        \"\"\"\r\n        从ACITIVITY_DATA_TYPES中选择一个数据类型\r\n        数据类型包括：['step_count', 'distance', 'flights_climbed', 'active_energy_burned', 'exercise_minutes', 'active_hours']\r\n        :param user_id:\r\n        :param data_type: ACITIVITY_DATA_TYPES中的一个\r\n        \"\"\"\r\n        self._datatype = data_type.value  # 数据类型\r\n        self._user_id = user_id\r\n        self._activity_data = namedtuple(self._datatype, ['date', 'time', 'value'])\r\n        self.data = None\r\n        self._update_ways = [UpdateFromWatch, UpdateFromPhone, UpdateFromFile]\r\n        # todo 添加对应的handler，用于随机读写数据文件\r\n\r\n        self.load_data()\r\n\r\n    def load_data(self):\r\n        self.data = [self._activity_data(*x) for x in\r\n                     self.auto_update(self._update_ways)(self._user_id, self._datatype)]\r\n\r\n    def save_data(self):\r\n        pass\r\n\r\n    def get_data_by_date(self, date: dt_date):\r\n        return [x for x in self.data if x.date == date]\r\n\r\n    def get_daily_total(self, date: dt_date):\r\n        return sum([x.value for x in self.get_data_by_date(date)])\r\n\r\n    def get_all_daily_total(self):\r\n        return {x: self.get_daily_total(x) for x in self.get_all_dates()}\r\n\r\n    def get_all_dates(self):\r\n        return list(set([x.date for x in self.data]))\r\n\r\n    def get_latest_daily_total(self):\r\n        return self.get_daily_total(max(self.get_all_dates()))\r\n\r\n\r\nclass StepCount(BaseActivityData, AutoUpdateFromMultipleWays):\r\n    \"\"\"步数类\"\"\"\r\n\r\n    def __init__(self, user_id):\r\n        self._datatype = 'step_count'\r\n        self.user_id = user_id\r\n        self._step_count = namedtuple(self._datatype, ['date', 'time', 'steps'])\r\n        self.data = None\r\n        self.daily_total_data = None\r\n        # super().__init__([UpdateFromWatch, UpdateFromPhone, UpdateFromFile])\r\n        self._update_ways = [UpdateFromWatch, UpdateFromPhone, UpdateFromFile]\r\n\r\n        self.load_data()\r\n\r\n    def load_data(self):\r\n        self.data = [self._step_count(*x) for x in self.auto_update(self._update_ways)(self.user_id, self._datatype)]\r\n\r\n    def save_data(self):\r\n        pass\r\n\r\n    def get_data_by_date(self, date: dt_date):\r\n        return [x for x in self.data if x.date == date]\r\n\r\n    def get_daily_total(self, date: dt_date):\r\n        return sum([x.steps for x in self.get_data_by_date(date)])\r\n\r\n    def get_all_daily_total(self):\r\n        return {x: self.get_daily_total(x) for x in self.get_all_dates()}\r\n\r\n    def get_all_dates(self):\r\n        return list(set([x.date for x in self.data]))\r\n\r\n    def get_latest_daily_total(self):\r\n        return self.get_daily_total(max(self.get_all_dates()))\r\n\r\n\r\nclass Distance(AutoUpdateFromMultipleWays, BaseActivityData):\r\n    \"\"\"距离类\"\"\"\r\n\r\n    def __init__(self, user_id):\r\n        self._datatype = 'distance'\r\n        self.user_id = user_id\r\n        self._distance = namedtuple(self._datatype, ['date', 'time', 'distance'])\r\n        self.data = None\r\n        super().__init__([UpdateFromWatch, UpdateFromPhone, UpdateFromFile])\r\n\r\n        self.load_data()\r\n\r\n    def load_data(self):\r\n        self.data = [self._distance(*x) for x in self.auto_update()(self.user_id, self._datatype)]\r\n\r\n    def save_data(self):\r\n        pass\r\n\r\n    def get_data_by_date(self, date: dt_date):\r\n        return [x for x in self.data if x.date == date]\r\n\r\n    def get_daily_total(self, date: dt_date):\r\n        return sum([x.distance for x in self.get_data_by_date(date)])\r\n\r\n    def get_all_daily_total(self):\r\n        return {x: self.get_daily_total(x) for x in self.get_all_dates()}\r\n\r\n    def get_all_dates(self):\r\n        return list(set([x.date for x in self.data]))\r\n\r\n    def get_latest_daily_total(self):\r\n        return self.get_daily_total(max(self.get_all_dates()))\r\n\r\n\r\nclass FlightsClimbed(AutoUpdateFromMultipleWays, BaseActivityData):\r\n    \"\"\"爬楼类\"\"\"\r\n\r\n    def __init__(self, user_id):\r\n        self._datatype = 'flights_climbed'\r\n        self.user_id = user_id\r\n        self._flights_climbed = namedtuple(self._datatype, ['date', 'time', 'flights_climbed'])\r\n        self.data = None\r\n        super().__init__([UpdateFromWatch, UpdateFromPhone, UpdateFromFile])\r\n\r\n        self.load_data()\r\n\r\n    def load_data(self):\r\n        self.data = [self._flights_climbed(*x) for x in self.auto_update()(self.user_id, self._datatype)]\r\n\r\n    def save_data(self):\r\n        pass\r\n\r\n    def get_data_by_date(self, date: dt_date):\r\n        return [x for x in self.data if x.date == date]\r\n\r\n    def get_daily_total(self, date: dt_date):\r\n        return sum([x.flights_climbed for x in self.get_data_by_date(date)])\r\n\r\n    def get_all_daily_total(self):\r\n        return {x: self.get_daily_total(x) for x in self.get_all_dates()}\r\n\r\n    def get_all_dates(self):\r\n        return list(set([x.date for x in self.data]))\r\n\r\n    def get_latest_daily_total(self):\r\n        return self.get_daily_total(max(self.get_all_dates()))\r\n\r\n\r\nclass ActiveEnergyBurned(AutoUpdateFromMultipleWays, BaseActivityData):\r\n    \"\"\"活动能量类\"\"\"\r\n\r\n    def __init__(self, user_id):\r\n        self._datatype = 'active_energy_burned'\r\n        self.user_id = user_id\r\n        self._active_energy_burned = namedtuple(self._datatype, ['date', 'time', 'active_energy_burned'])\r\n        self.data = None\r\n        super().__init__([UpdateFromWatch, UpdateFromPhone, UpdateFromFile])\r\n\r\n        self.load_data()\r\n\r\n    def load_data(self):\r\n        self.data = [self._active_energy_burned(*x) for x in self.auto_update()(self.user_id, self._datatype)]\r\n\r\n    def save_data(self):\r\n        pass\r\n\r\n    def get_data_by_date(self, date: dt_date):\r\n        return [x for x in self.data if x.date == date]\r\n\r\n    def get_daily_total(self, date: dt_date):\r\n        return sum([x.active_energy_burned for x in self.get_data_by_date(date)])\r\n\r\n    def get_all_daily_total(self):\r\n        return {x: self.get_daily_total(x) for x in self.get_all_dates()}\r\n\r\n    def get_all_dates(self):\r\n        return list(set([x.date for x in self.data]))\r\n\r\n    def get_latest_daily_total(self):\r\n        return self.get_daily_total(max(self.get_all_dates()))\r\n\r\n\r\nclass ExerciseMinutes(AutoUpdateFromMultipleWays, BaseActivityData):\r\n    \"\"\"锻炼时长\"\"\"\r\n\r\n    def __init__(self, user_id):\r\n        self._datatype = 'exercise_minutes'\r\n        self.user_id = user_id\r\n        self._exercise_minutes = namedtuple(self._datatype, ['date', 'time', 'exercise_minutes'])\r\n        self.data = None\r\n        super().__init__([UpdateFromWatch, UpdateFromPhone, UpdateFromFile])\r\n\r\n        self.load_data()\r\n\r\n    def load_data(self):\r\n        self.data = [self._exercise_minutes(*x) for x in self.auto_update()(self.user_id, self._datatype)]\r\n\r\n    def save_data(self):\r\n        pass\r\n\r\n    def get_data_by_date(self, date: dt_date):\r\n        return [x for x in self.data if x.date == date]\r\n\r\n    def get_daily_total(self, date: dt_date):\r\n        return sum([x.exercise_minutes for x in self.get_data_by_date(date)])\r\n\r\n    def get_all_daily_total(self):\r\n        return {x: self.get_daily_total(x) for x in self.get_all_dates()}\r\n\r\n    def get_all_dates(self):\r\n        return list(set([x.date for x in self.data]))\r\n\r\n    def get_latest_daily_total(self):\r\n        return self.get_daily_total(max(self.get_all_dates()))\r\n\r\n\r\nclass ActiveHours(AutoUpdateFromMultipleWays, BaseActivityData):\r\n    \"\"\"活动时长\"\"\"\r\n\r\n    def __init__(self, user_id):\r\n        self._datatype = 'active_hours'\r\n        self.user_id = user_id\r\n        self._active_hours = namedtuple(self._datatype, ['date', 'time', 'active_hours'])\r\n        self.data = None\r\n        super().__init__([UpdateFromWatch, UpdateFromPhone, UpdateFromFile])\r\n\r\n        self.load_data()\r\n\r\n    def load_data(self):\r\n        self.data = [self._active_hours(*x) for x in self.auto_update()(self.user_id, self._datatype)]\r\n\r\n    def save_data(self):\r\n        pass\r\n\r\n    def get_data_by_date(self, date: dt_date):\r\n        return [x for x in self.data if x.date == date]\r\n\r\n    def get_daily_total(self, date: dt_date):\r\n        return sum([x.active_hours for x in self.get_data_by_date(date)])\r\n\r\n    def get_all_daily_total(self):\r\n        return {x: self.get_daily_total(x) for x in self.get_all_dates()}\r\n\r\n    def get_all_dates(self):\r\n        return list(set([x.date for x in self.data]))\r\n\r\n    def get_latest_daily_total(self):\r\n        return self.get_daily_total(max(self.get_all_dates()))\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/health_tracker/tracker/data.py b/health_tracker/tracker/data.py
--- a/health_tracker/tracker/data.py	(revision c3748598b753336fb4ad7620d1301ee41ae50a15)
+++ b/health_tracker/tracker/data.py	(date 1704302251834)
@@ -351,6 +351,7 @@
         self.user_id = user_id
         self._distance = namedtuple(self._datatype, ['date', 'time', 'distance'])
         self.data = None
+        super().__init__()
         super().__init__([UpdateFromWatch, UpdateFromPhone, UpdateFromFile])
 
         self.load_data()
